<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Daiwf&#39;s Blog</title>
  <subtitle>大音稀声，大象无形。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://dwflzxj.github.io/"/>
  <updated>2017-03-15T13:30:17.314Z</updated>
  <id>http://dwflzxj.github.io/</id>
  
  <author>
    <name>戴文峰</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Git简介以及GitHub使用介绍</title>
    <link href="http://dwflzxj.github.io/2017/03/15/GitHub%E4%BD%BF%E7%94%A8%E7%AE%80%E4%BB%8B/"/>
    <id>http://dwflzxj.github.io/2017/03/15/GitHub使用简介/</id>
    <published>2017-03-15T13:29:32.000Z</published>
    <updated>2017-03-15T13:30:17.314Z</updated>
    
    <content type="html"><![CDATA[<h1 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h1><h2 id="只适合程序员吗？"><a href="#只适合程序员吗？" class="headerlink" title="只适合程序员吗？"></a>只适合程序员吗？</h2><h2 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h2><p>这个网站就是提供Git仓库托管服务的</p>
<h2 id="官方logo"><a href="#官方logo" class="headerlink" title="官方logo"></a>官方logo</h2><p><img src="http://a.36krcnd.com/photo/33800a4cd9a7c73f4137a082ce62a968.jpeg!heading" alt="image"></p>
<h2 id="官方标识"><a href="#官方标识" class="headerlink" title="官方标识"></a>官方标识</h2><p><img src="http://a.36krcnd.com/photo/d063160d8374c53de163e8d287fc0d9d.jpeg!heading" alt="image"></p>
<h2 id="官方吉祥物"><a href="#官方吉祥物" class="headerlink" title="官方吉祥物"></a>官方吉祥物</h2><p><img src="http://a.36krcnd.com/photo/fd2a069db6129124413d83fce249be42.jpeg!heading" alt="image"></p>
<p><img src="https://octodex.github.com/images/labtocat.png" alt="image"><br><img src="https://octodex.github.com/images/femalecodertocat.png" alt="image"><br><img src="https://octodex.github.com/images/daftpunktocat-thomas.gif" alt="image"></p>
<p><img src="https://octodex.github.com/images/saketocat.png" alt="image"></p>
<hr>
<h1 id="有什么用？"><a href="#有什么用？" class="headerlink" title="有什么用？"></a>有什么用？</h1><p>开始一个开源项目（一个传奇程序员的开始）</p>
<p>写书（合作写书，如果真的有人这么干的话）</p>
<p>写文档 </p>
<p>用GitHub搭建博客、个人网站</p>
<p>学习大牛们的开源项目代码</p>
<p>参与开源项目的开发体验做程序员的感觉</p>
<p>工作中需要实现某复杂功能避免造轮子直接看有没有现成的</p>
<h1 id="我用github做了点啥？"><a href="#我用github做了点啥？" class="headerlink" title="我用github做了点啥？"></a>我用github做了点啥？</h1><h2 id="自己搭建的静态博客"><a href="#自己搭建的静态博客" class="headerlink" title="自己搭建的静态博客"></a><a href="http://dwflzxj.github.io/">自己搭建的静态博客</a></h2><h2 id="什么是github-page"><a href="#什么是github-page" class="headerlink" title="什么是github page"></a><a href="http://note.youdao.com/" target="_blank" rel="external">什么是github page</a></h2><h2 id="托管了一个自己写着玩的测试代码"><a href="#托管了一个自己写着玩的测试代码" class="headerlink" title="托管了一个自己写着玩的测试代码"></a>托管了一个自己写着玩的测试代码</h2><h1 id="怎么用？-gitshell"><a href="#怎么用？-gitshell" class="headerlink" title="怎么用？ gitshell"></a>怎么用？ gitshell</h1><h2 id="Git起源"><a href="#Git起源" class="headerlink" title="Git起源"></a>Git起源</h2><p>Git是目前世界上最先进的分布式版本控制系统（没有之一）。</p>
<p>Linus Torvalds在2002年起，使用BitMover的版本控制软件BitKeeper管理Linux核心开发，而因为BitKeeper除商业付费版本，仅提供可免费使用但不允许修改重新编译的精简版本，引起了开源社区的不满，如自由软件之父Richard stallman也敢严厉批评Linux Torvalds使用非自由软件开发Linux核心。</p>
<p>在2005年，Samba档案服务器开发人Andrew Tridgell写了连接BitKeeper存储库的简单程序，被BitMover创办人Larry McVoy指控对BitKeeper进行逆向工程，因为决定停止BitKeeper对Linux的支持。</p>
<p>顿时Linux核心开发受到了严峻的挑战，而Linus Torvalds秉承自己的版本自己写的精神，整个周末都不见人影，隔周却如变戏法般带着Git出现。</p>
<h2 id="图示"><a href="#图示" class="headerlink" title="图示"></a>图示</h2><h3 id="集中式"><a href="#集中式" class="headerlink" title="集中式"></a>集中式</h3><p><img src="http://www.liaoxuefeng.com/files/attachments/001384860735706fd4c70aa2ce24b45a8ade85109b0222b000/0" alt="image"></p>
<h3 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h3><p><img src="http://www.liaoxuefeng.com/files/attachments/0013848607465969378d7e6d5e6452d8161cf472f835523000/0" alt="image"></p>
<h3 id="说到github-下面是经常拿来调侃的一张图"><a href="#说到github-下面是经常拿来调侃的一张图" class="headerlink" title="说到github 下面是经常拿来调侃的一张图"></a>说到github 下面是经常拿来调侃的一张图</h3><p><img src="https://pic4.zhimg.com/7c9d3403bf922b1663f56975869c829b_b.png" alt="image"></p>
<p>一般流程 </p>
<p>先 fork 别人的仓库，相当于拷贝一份，</p>
<p>clone 到本地分支，做一些 bug fix</p>
<p>发起 pull request 给原仓库，让他看到你修改的 bug</p>
<p>原仓库 review 这个 bug，如果是正确的话，</p>
<p>就会 merge 到他自己的项目中至此，</p>
<p>git merge的基本用法为把一个分支或或某个commit的修改合并到现在的分支上。</p>
<p>整个 pull request 的过程就结束了。</p>
<h3 id="GitHub-的-Pull-Request-是指什么意思"><a href="#GitHub-的-Pull-Request-是指什么意思" class="headerlink" title="[GitHub 的 Pull Request 是指什么意思]"></a>[GitHub 的 Pull Request 是指什么意思]</h3><h3 id="issue是啥"><a href="#issue是啥" class="headerlink" title="issue是啥"></a>issue是啥</h3><p>可以用来提出问题 讨论<br>其他人fork你 也会在issue中显示 </p>
<h3 id="甚至有人用issue写博客"><a href="#甚至有人用issue写博客" class="headerlink" title="甚至有人用issue写博客"></a><a href="https://github.com/Kjuly/issues/issues/23" target="_blank" rel="external">甚至有人用issue写博客</a></h3><h3 id="在线学习git分支"><a href="#在线学习git分支" class="headerlink" title="在线学习git分支"></a><a href="http://learngitbranching.js.org/?NODEMO" target="_blank" rel="external">在线学习git分支</a></h3>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;是什么？&quot;&gt;&lt;a href=&quot;#是什么？&quot; class=&quot;headerlink&quot; title=&quot;是什么？&quot;&gt;&lt;/a&gt;是什么？&lt;/h1&gt;&lt;h2 id=&quot;只适合程序员吗？&quot;&gt;&lt;a href=&quot;#只适合程序员吗？&quot; class=&quot;headerlink&quot; title=&quot;只
    
    </summary>
    
      <category term="笔记" scheme="http://dwflzxj.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="教程，文章" scheme="http://dwflzxj.github.io/tags/%E6%95%99%E7%A8%8B%EF%BC%8C%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>写了一个简单的爬虫生成静态页</title>
    <link href="http://dwflzxj.github.io/2016/12/27/%E6%88%91%E5%81%9A%E7%9A%84%E7%88%B1%E4%B8%8A%E7%BD%91%E7%9B%B8%E4%BA%B2%E5%B8%A6%E9%80%9B%E9%A1%B5%E9%9D%A2/"/>
    <id>http://dwflzxj.github.io/2016/12/27/我做的爱上网相亲带逛页面/</id>
    <published>2016-12-27T14:00:00.000Z</published>
    <updated>2017-01-06T16:22:17.585Z</updated>
    
    <content type="html"><![CDATA[<h2 id="利用爬虫爬取爱上网相亲板块的所有图片自动生成静态页"><a href="#利用爬虫爬取爱上网相亲板块的所有图片自动生成静态页" class="headerlink" title="利用爬虫爬取爱上网相亲板块的所有图片自动生成静态页"></a>利用爬虫爬取爱上网相亲板块的所有图片自动生成静态页</h2><p>地址 如下<br><a href="http://dwflzxj.github.io/about/indexASW.html">http://dwflzxj.github.io/about/indexASW.html</a> </p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;利用爬虫爬取爱上网相亲板块的所有图片自动生成静态页&quot;&gt;&lt;a href=&quot;#利用爬虫爬取爱上网相亲板块的所有图片自动生成静态页&quot; class=&quot;headerlink&quot; title=&quot;利用爬虫爬取爱上网相亲板块的所有图片自动生成静态页&quot;&gt;&lt;/a&gt;利用爬虫爬取爱上网相亲
    
    </summary>
    
      <category term="笔记" scheme="http://dwflzxj.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="博客，文章" scheme="http://dwflzxj.github.io/tags/%E5%8D%9A%E5%AE%A2%EF%BC%8C%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>cSharp中获取服务器IP客户端IP等详细说明</title>
    <link href="http://dwflzxj.github.io/2016/11/27/cSharp%E4%B8%AD%E8%8E%B7%E5%8F%96%E6%9C%8D%E5%8A%A1%E5%99%A8IP%E5%AE%A2%E6%88%B7%E7%AB%AFIP%E7%AD%89%E8%AF%A6%E7%BB%86%E8%AF%B4%E6%98%8E/"/>
    <id>http://dwflzxj.github.io/2016/11/27/cSharp中获取服务器IP客户端IP等详细说明/</id>
    <published>2016-11-27T14:00:00.000Z</published>
    <updated>2016-11-27T14:57:25.713Z</updated>
    
    <content type="html"><![CDATA[<p>客户端ip: </p>
<p>Request.ServerVariables.Get(“Remote_Addr”).ToString(); </p>
<p>客户端主机名:</p>
<p>Request.ServerVariables.Get(“Remote_Host”).ToString(); </p>
<p>客户端浏览器IE：</p>
<p>Request.Browser.Browser; </p>
<p>客户端浏览器 版本号：</p>
<p>Request.Browser.MajorVersion;//</p>
<p>客户端操作系统：</p>
<p>Request.Browser.Platform; </p>
<p>服务器ip: </p>
<p>Request.ServerVariables.Get(“Local_Addr”).ToString(); </p>
<p>服务器名：</p>
<p>Request.ServerVariables.Get(“Server_Name”).ToString();</p>
<p>如果你想进一步了解ServerVariables，可以用</p>
<p>foreach(String o in Request.ServerVariables){<br>  Response.Write(o+”=”+Request.ServerVariables[o]+”<br>“);<br>} </p>
<p>获取客户端IP方法</p>
<p> public string GetIP()<br>     {<br>         string uip = “”;<br>         if (HttpContext.Current.Request.ServerVariables[“HTTP_VIA”] != null)<br>         {<br>             uip = HttpContext.Current.Request.ServerVariables[“HTTP_X_FORWARDED_FOR”].ToString();<br>         }<br>         else<br>         {<br>             uip = HttpContext.Current.Request.ServerVariables[“REMOTE_ADDR”].ToString();<br>         }<br>         return uip;<br>     }</p>
<p>C# ServerVariables参数说明</p>
<p>Request.ServerVariables[“Url”]<br>返回服务器地址</p>
<p>Request.ServerVariables[“Path_Info”]<br>客户端提供的路径信息</p>
<p>Request.ServerVariables[“Appl_Physical_Path”]<br>与应用程序元数据库路径相应的物理路径</p>
<p>Request.ServerVariables[“Path_Translated”]<br>通过由虚拟至物理的映射后得到的路径</p>
<p>Request.ServerVariables[“Script_Name”]<br>执行脚本的名称</p>
<p>Request.ServerVariables[“Query_String”]<br>查询字符串內容</p>
<p>Request.ServerVariables[“Http_Referer”]<br>请求的字符串內容</p>
<p>Request.ServerVariables[“Server_Port”]<br>接受请求的服务器端口号</p>
<p>Request.ServerVariables[“Remote_Addr”]<br>发出请求的远程主机的IP地址</p>
<p>Request.ServerVariables[“Remote_Host”]<br>发出请求的远程主机名称</p>
<p>Request.ServerVariables[“Local_Addr”]<br>返回接受请求的服务器地址</p>
<p>Request.ServerVariables[“Http_Host”]<br>返回服务器地址</p>
<p>Request.ServerVariables[“Server_Name”]<br>服务器的主机名、DNS地址或IP地址</p>
<p>Request.ServerVariables[“Request_Method”]<br>提出请求的方法比如GET、HEAD、POST等等</p>
<p>Request.ServerVariables[“Server_Port_Secure”]<br>如果接受请求的服务器端口为安全端口时，则为1，否则为0</p>
<p>Request.ServerVariables[“Server_Protocol”]<br>服务器使用的协议的名称和版本</p>
<p>Request.ServerVariables[“Server_Software”]<br>应答请求并运行网关的服务器软件的名称和版本</p>
<p>Request.ServerVariables[“All<em>Http”]<br>客户端发送的所有HTTP标头，前缀HTTP</em></p>
<p>Request.ServerVariables[“All<em>Raw”]<br>客户端发送的所有HTTP标头,其结果和客户端发送时一样，没有前缀HTTP</em></p>
<p>Request.ServerVariables[“Appl_MD_Path”]<br>应用程序的元数据库路径</p>
<p>Request.ServerVariables[“Content_Length”]<br>客户端发出內容的长度</p>
<p>Request.ServerVariables[“Https”]<br>如果请求穿过安全通道（SSL），则返回ON如果请求来自非安全通道，则返回OFF</p>
<p>Request.ServerVariables[“Instance_ID”]<br> IIS实例的ID号</p>
<p>Request.ServerVariables[“Instance_Meta_Path”]<br>响应请求的IIS实例的元数据库路径</p>
<p>Request.ServerVariables[“Http_Accept_Encoding”]<br>返回內容如：gzip,deflate</p>
<p>Request.ServerVariables[“Http_Accept_Language”]<br>返回內容如：en-us</p>
<p>Request.ServerVariables[“Http_Connection”]<br>返回內容：Keep-Alive</p>
<p>Request.ServerVariables[“Http_Cookie”]<br>返回內容如：nVisiT%</p>
<p>2DYum=125;ASPSESSIONIDCARTQTRA=FDOBFFABJGOECBBKHKGPFIJI;ASPSESSIONIDCAQQTSRB=LKJJPLABABILLPCOGJGAMKAM;ASPSESSIONIDACRRSSRA=DK</p>
<p>HHHFBBJOJCCONPPHLKGHPB</p>
<p>Request.ServerVariables[“Http_User_Agent”]<br>返回內容：Mozilla/4.0(compatible;MSIE6.0;WindowsNT5.1;SV1)</p>
<p>Request.ServerVariables[“Https_Keysize”]<br>安全套接字层连接关键字的位数，如128</p>
<p>Request.ServerVariables[“Https_Secretkeysize”]<br>服务器验证私人关键字的位数如1024</p>
<p>Request.ServerVariables[“Https_Server_Issuer”]<br>服务器证书的发行者字段</p>
<p>Request.ServerVariables[“Https_Server_Subject”]<br>服务器证书的主题字段</p>
<p>Request.ServerVariables[“Auth_Password”]<br>当使用基本验证模式时，客户在密码对话框中输入的密码</p>
<p>Request.ServerVariables[“Auth_Type”]<br>是用户访问受保护的脚本时，服务器用於检验用户的验证方法</p>
<p>Request.ServerVariables[“Auth_User”]<br>代证的用户名</p>
<p>Request.ServerVariables[“Cert_Cookie”]<br>唯一的客户证书ID号</p>
<p>Request.ServerVariables[“Cert_Flag”]<br>客户证书标誌，如有客户端证书，则bit0为0如果客户端证书验证无效，bit1被设置为1</p>
<p>Request.ServerVariables[“Cert_Issuer”]<br>用户证书中的发行者字段</p>
<p>Request.ServerVariables[“Cert_Keysize”]<br>安全套接字层连接关键字的位数，如128</p>
<p>Request.ServerVariables[“Cert_Secretkeysize”]<br>服务器验证私人关键字的位数如1024</p>
<p>Request.ServerVariables[“Cert_Serialnumber”]<br>客户证书的序列号字段</p>
<p>Request.ServerVariables[“Cert_Server_Issuer”]<br>服务器证书的发行者字段</p>
<p>Request.ServerVariables[“Cert_Server_Subject”]<br>服务器证书的主题字段</p>
<p>Request.ServerVariables[“Cert_Subject”]<br>客户端证书的主题字段</p>
<p>Request.ServerVariables[“Content_Type”]<br>客户发送的form內容或HTTPPUT的数据类型</p>
<p>Request.ServerVariables[“HTTP_X_FORWARDED_FOR”]<br>可以获得位于代理（网关）后面的直接IP，当然必须这个代理支持</p>
<p> 一些被隐藏起来的Request.ServerVariables参数：<br>Request.ServerVariables[“NUMBER_OF_PROCESSORS”]<br> Request.ServerVariables[“OS”]<br> Request.ServerVariables[“WINDIR”]<br> Request.ServerVariables[“TEMP”]<br> Request.ServerVariables[“TMP”]<br> Request.ServerVariables[“ComSpec”]<br> Request.ServerVariables[“Os2LibPath”]<br> Request.ServerVariables[“Path”]<br> Request.ServerVariables[“PATHEXT”]<br> Request.ServerVariables[“PROCESSOR_ARCHITECTURE”]<br> Request.ServerVariables[“PROCESSOR_IDENTIFIER”]<br> Request.ServerVariables[“PROCESSOR_LEVEL”]<br> Request.ServerVariables[“PROCESSOR_REVISION”]</p>
<p>本机ip:&lt;%=request.servervariables[“remote_addr”]%&gt;</p>
<p>服务器名:&lt;%=Request.ServerVariables[“SERVER_NAME”]%&gt;</p>
<p>服务器IP:&lt;%=Request.ServerVariables[“LOCAL_ADDR”]%&gt;</p>
<p>服务器端口:&lt;%=Request.ServerVariables[“SERVER_PORT”]%&gt;</p>
<p>服务器时间:&lt;%=now%&gt;</p>
<p> IIS版本:&lt;%=Request.ServerVariables[“SERVER_SOFTWARE”]%&gt;</p>
<p>脚本超时时间:&lt;%=Server.ScriptTimeout%&gt;</p>
<p>本文件路径:&lt;%=server.mappath(Request.ServerVariables[“SCRIPT_NAME”])%&gt;</p>
<p>服务器CPU数量:&lt;%=Request.ServerVariables[“NUMBER_OF_PROCESSORS”]%&gt;</p>
<p>服务器解译引擎:&lt;%=ScriptEngine &amp; “/“&amp; ScriptEngineMajorVersion&amp;”.”&amp;ScriptEngineMinorVersion&amp;”.”&amp; ScriptEngineBuildVersion %&gt;</p>
<p>服务器操作系统:&lt;%=Request.ServerVariables[“OS”]%&gt;</p>
<p>支持的文件类型：&lt;%=Request.ServerVariables[“HTTP_Accept”]%&gt;</p>
<p>访问的文件路径：&lt;%=Request.ServerVariables[“HTTP_url”]%&gt;</p>
<p>用户代理的信息：&lt;%=Request.ServerVariables[“HTTP_USER_AGENT”]%&gt;</p>
<p>Request.ServerVariables变量意义. http代理相关知识<br>Request.ServerVariables[“HTTP_VIA”]———可以获得用户内部的ip<br> Request.ServerVariables[“HTTP_X_FORWARDED_FOR”]———可以知道代理服务器的服务器名以及端口<br>Request.ServerVariables[“REMOTE_ADDR”]– 发出请求的远程主机的 IP 地址。</p>
<p>http代理相关知识<br> 关键就在HTTP_X_FORWARDED_FOR<br>使用不同种类代理服务器，上面的信息会有所不同：</p>
<p>一、没有使用代理服务器的情况：<br>REMOTE_ADDR = 您的 IP<br> HTTP_VIA = 没数值或不显示<br>HTTP_X_FORWARDED_FOR = 没数值或不显示</p>
<p>二、使用透明代理服务器的情况：Transparent Proxies<br> REMOTE_ADDR = 代理服务器 IP<br> HTTP_VIA = 代理服务器 IP<br> HTTP_X_FORWARDED_FOR = 您的真实 IP<br>这类代理服务器还是将您的信息转发给您的访问对象，无法达到隐藏真实身份的目的。</p>
<p>三、使用普通匿名代理服务器的情况：Anonymous Proxies<br> REMOTE_ADDR = 代理服务器 IP<br> HTTP_VIA = </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;客户端ip: &lt;/p&gt;
&lt;p&gt;Request.ServerVariables.Get(“Remote_Addr”).ToString(); &lt;/p&gt;
&lt;p&gt;客户端主机名:&lt;/p&gt;
&lt;p&gt;Request.ServerVariables.Get(“Remote_Host”).T
    
    </summary>
    
      <category term="笔记" scheme="http://dwflzxj.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="博客，文章" scheme="http://dwflzxj.github.io/tags/%E5%8D%9A%E5%AE%A2%EF%BC%8C%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>CSharp自学巩固笔记1</title>
    <link href="http://dwflzxj.github.io/2016/10/28/CSharp%E8%87%AA%E5%AD%A6%E5%B7%A9%E5%9B%BA%E7%AC%94%E8%AE%B0/"/>
    <id>http://dwflzxj.github.io/2016/10/28/CSharp自学巩固笔记/</id>
    <published>2016-10-27T21:43:32.000Z</published>
    <updated>2016-10-28T17:48:06.395Z</updated>
    
    <content type="html"><![CDATA[<h2 id="委托、事件和匿名方法"><a href="#委托、事件和匿名方法" class="headerlink" title="委托、事件和匿名方法"></a>委托、事件和匿名方法</h2><h4 id="委托"><a href="#委托" class="headerlink" title="委托"></a>委托</h4><p>1.委托是十分棘手的概念，好多使用C#的程序员都不理解委托。如果不常使用委托很快就会忘记委托是什么含义。看到含有委托的代码也就看不明白了。</p>
<p>2.委托的申明指定了一个返回类型和一个参数列表。定义了委托就可以申明该委托类型的变量。接着把这个变量初始化为与委托有相同返回类型和参数列表的函数引用。之后用该变量调用这个函数。（变量调用函数）委托变量还可以被作为参数传递给一个函数。这样，该函数就可以使用委托调用它引用的任何函数（或者理解为使用该变量去调用）。<br>示例使用委托访问两个函数中的一个。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Program</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义了一个委托 </span></span><br><span class="line">  <span class="function">delegate <span class="keyword">double</span> <span class="title">ProcessDelegate</span><span class="params">(<span class="keyword">double</span> param1,<span class="keyword">double</span> param2)</span></span>;</span><br><span class="line">  <span class="comment">//定义了两个和委托有着相同参数的函数 根据概念我们知道 这两个函数都可以被该委托的变量所调用的</span></span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">double</span> <span class="title">Multiply</span><span class="params">(<span class="keyword">double</span> param1,<span class="keyword">double</span> param2)</span></span><br><span class="line">  </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> param1*param2;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">double</span> <span class="title">Divide</span><span class="params">(<span class="keyword">double</span> param1,<span class="keyword">double</span> param2)</span></span><br><span class="line">  </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> param1/param2;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Mian</span><span class="params">(<span class="built_in">string</span>[] args)</span></span><br><span class="line">  </span>&#123;</span><br><span class="line">      <span class="comment">//定义了委托变量</span></span><br><span class="line">      ProcessDelegate process;</span><br><span class="line">      Console.WriteLine(<span class="string">"Enter 2 numbers separated with a comma:"</span>);</span><br><span class="line">      <span class="built_in">string</span> input = Console.ReadLine();</span><br><span class="line">      <span class="keyword">int</span> CommaPos = input.IndexOf(<span class="string">','</span>);</span><br><span class="line">      <span class="keyword">double</span> param1 = Convert.ToDouble(input.Substring(<span class="number">0</span>,CommaPos));</span><br><span class="line">      <span class="keyword">double</span> param2 = Convert.ToDouble(input.Substring(CommaPos+<span class="number">1</span>,input.Length-commaPos-<span class="number">1</span>));</span><br><span class="line">      Console.WriteLine(<span class="string">"Enter M to multiply or D to divide:"</span>);</span><br><span class="line">      input=Console.ReadLine();</span><br><span class="line">      <span class="keyword">if</span>(input == <span class="string">"M"</span>)</span><br><span class="line">      <span class="comment">//这里是最怪异的地方，特殊的语法用来把一个函数引用赋值给委托变量。如果用对象初始化的概念去理解往往就会搞不明白。</span></span><br><span class="line">      process = <span class="keyword">new</span> ProcessDelegate(Multiply);</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      process =  <span class="keyword">new</span> ProcessDelegate(Divide);</span><br><span class="line">      <span class="comment">//此处可以看到委托的变量引用了函数</span></span><br><span class="line">      Console.WriteLine(<span class="string">"Result:&#123;0&#125;"</span>,process(param1,param2));</span><br><span class="line">      Console.ReadKey();</span><br><span class="line">     </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//委托变量也可以被当做参数传递 像插件一个去被函数使用     </span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ExcuteFuction</span><span class="params">(ProcessDlegate process)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">  process(<span class="number">2.2</span>,<span class="number">3.3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h4><p>1.对象会引发事件，事件是用来被订阅的。单个事件可以被多个处理程序订阅。</p>
<p>2.要处理事件，需要提供事件处理方法来订阅事件，该方法的返回类型和参数应该<strong>匹配</strong>事件<strong>指定</strong>的<strong>委托</strong></p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Timers;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Ch13Ex01</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">int</span> counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">string</span> displayString =</span><br><span class="line">                             <span class="string">"This string will appear one letter at a time. "</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            Timer myTimer = <span class="keyword">new</span> Timer(<span class="number">100</span>);</span><br><span class="line">            <span class="comment">//订阅事件的简化写法</span></span><br><span class="line">            myTimer.Elapsed += WriteChar;</span><br><span class="line">            <span class="comment">//或者这么写 指定委托类型</span></span><br><span class="line">             myTimer.Elapsed += <span class="keyword">new</span> ElapsedEventHandler(WriteChar);</span><br><span class="line">            myTimer.Start();</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">WriteChar</span>(<span class="params"><span class="keyword">object</span> source, ElapsedEventArgs e</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            Console.Write(displayString[counter++ % displayString.Length]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>如何定义事件引发事件</li>
</ol>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Timers;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Ch13Ex02</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//定义一个委托 定义事件之前必须要定义一个委托用在该事件上 </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">delegate</span> <span class="keyword">void</span> <span class="title">MessageHandler</span>(<span class="params"><span class="keyword">string</span> messageText</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Connection</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">event</span> MessageHandler MessageArrived;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Timer pollTimer;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Connection</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            pollTimer = <span class="keyword">new</span> Timer(<span class="number">100</span>);</span><br><span class="line">            pollTimer.Elapsed += <span class="keyword">new</span> ElapsedEventHandler(CheckForMessage);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Connect</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            pollTimer.Start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Disconnect</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            pollTimer.Stop();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Random random = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">CheckForMessage</span>(<span class="params"><span class="keyword">object</span> source, ElapsedEventArgs e</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"Checking for new messages."</span>);</span><br><span class="line">            <span class="keyword">if</span> ((random.Next(<span class="number">9</span>) == <span class="number">0</span>) &amp;&amp; (MessageArrived != <span class="keyword">null</span>))</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="comment">//用事件的名称去引发事件 至于事件会去引发什么处理程序就让事件注册的处理程序决定</span></span><br><span class="line">            </span><br><span class="line">                MessageArrived(<span class="string">"Hello Mum!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Ch13Ex02</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Display</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DisplayMessage</span>(<span class="params"><span class="keyword">string</span> message</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"Message arrived: &#123;0&#125;"</span>, message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Ch13Ex02</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">//主程序</span></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">        <span class="comment">/*我们的目的是实现一个监听连接 触发事件之后显示内容的功能</span><br><span class="line">        1首先初始化连接的实例和显示的实例</span><br><span class="line">       2 要在类中定义好事件</span><br><span class="line">       3写好什么时候触发这个事件 </span><br><span class="line">       4为事件注册处理程序</span><br><span class="line">       5开始连接</span><br><span class="line">        */</span></span><br><span class="line">            Connection myConnection = <span class="keyword">new</span> Connection();</span><br><span class="line">            Display myDisplay = <span class="keyword">new</span> Display();</span><br><span class="line">            <span class="comment">//为MessageArrived事件注册处理程序 </span></span><br><span class="line">            myConnection.MessageArrived +=</span><br><span class="line">                    <span class="keyword">new</span> MessageHandler(myDisplay.DisplayMessage);</span><br><span class="line">            myConnection.Connect();</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4.多 用途的事件处理程序</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Timers;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Ch13Ex03</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">delegate</span> <span class="keyword">void</span> <span class="title">MessageHandler</span>(<span class="params">Connection source, MessageArrivedEventArgs e</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Connection</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">event</span> MessageHandler MessageArrived;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Timer pollTimer;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Connection</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            pollTimer = <span class="keyword">new</span> Timer(<span class="number">100</span>);</span><br><span class="line">            pollTimer.Elapsed += <span class="keyword">new</span> ElapsedEventHandler(CheckForMessage);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Connect</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            pollTimer.Start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Disconnect</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            pollTimer.Stop();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Random random = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">CheckForMessage</span>(<span class="params"><span class="keyword">object</span> source, ElapsedEventArgs e</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"Checking for new messages."</span>);</span><br><span class="line">            <span class="keyword">if</span> ((random.Next(<span class="number">9</span>) == <span class="number">0</span>) &amp;&amp; (MessageArrived != <span class="keyword">null</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                MessageArrived(<span class="keyword">this</span>, <span class="keyword">new</span> MessageArrivedEventArgs(<span class="string">"Hello Mum!"</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Display</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">DisplayMessage</span>(<span class="params">Connection source, MessageArrivedEventArgs e</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"Message arrived from: &#123;0&#125;"</span>, source.Name);</span><br><span class="line">            Console.WriteLine(<span class="string">"Message Text: &#123;0&#125;"</span>, e.Message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MessageArrivedEventArgs</span> : <span class="title">EventArgs</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">string</span> message;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Message</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> message;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MessageArrivedEventArgs</span>(<span class="params"></span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            message = <span class="string">"No message sent."</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MessageArrivedEventArgs</span>(<span class="params"><span class="keyword">string</span> newMessage</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            message = newMessage;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">      <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line">        </span>&#123;</span><br><span class="line">            Connection myConnection1 = <span class="keyword">new</span> Connection();</span><br><span class="line">            myConnection1.Name = <span class="string">"First connection."</span>;</span><br><span class="line">            Connection myConnection2 = <span class="keyword">new</span> Connection();</span><br><span class="line">            myConnection2.Name = <span class="string">"Second connection."</span>;</span><br><span class="line">            Display myDisplay = <span class="keyword">new</span> Display();</span><br><span class="line">            myConnection1.MessageArrived +=</span><br><span class="line">                         <span class="keyword">new</span> MessageHandler(myDisplay.DisplayMessage);</span><br><span class="line">            myConnection2.MessageArrived +=</span><br><span class="line">                         <span class="keyword">new</span> MessageHandler(myDisplay.DisplayMessage);</span><br><span class="line">            myConnection1.Connect();</span><br><span class="line">            myConnection2.Connect();</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h4 id="匿名方法"><a href="#匿名方法" class="headerlink" title="匿名方法"></a>匿名方法</h4><p>1.除了定义事件处理方法之外，还可以定义匿名方法。</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//该事件的注册就可以写成</span></span><br><span class="line">  myConnection1.MessageArrived +=</span><br><span class="line">                         <span class="keyword">new</span> MessageHandler(myDisplay.DisplayMessage);</span><br><span class="line">     myConnection1.MessageArrived +=</span><br><span class="line">                          delegate(Connection <span class="keyword">source</span>, MessageArrivedEventArgs e)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.<span class="keyword">WriteLine</span>(<span class="string">"Message arrived from: &#123;0&#125;"</span>, <span class="keyword">source</span>.Name);</span><br><span class="line">            Console.<span class="keyword">WriteLine</span>(<span class="string">"Message Text: &#123;0&#125;"</span>, e.Message);</span><br><span class="line">        &#125;;</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;委托、事件和匿名方法&quot;&gt;&lt;a href=&quot;#委托、事件和匿名方法&quot; class=&quot;headerlink&quot; title=&quot;委托、事件和匿名方法&quot;&gt;&lt;/a&gt;委托、事件和匿名方法&lt;/h2&gt;&lt;h4 id=&quot;委托&quot;&gt;&lt;a href=&quot;#委托&quot; class=&quot;headerli
    
    </summary>
    
      <category term="笔记" scheme="http://dwflzxj.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="博客，文章" scheme="http://dwflzxj.github.io/tags/%E5%8D%9A%E5%AE%A2%EF%BC%8C%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>学习Python的一些书单</title>
    <link href="http://dwflzxj.github.io/2016/07/22/%E5%AD%A6%E4%B9%A0Python%E7%9A%84%E4%B9%A6%E5%8D%95/"/>
    <id>http://dwflzxj.github.io/2016/07/22/学习Python的书单/</id>
    <published>2016-07-22T14:43:32.000Z</published>
    <updated>2016-07-22T15:49:00.606Z</updated>
    
    <content type="html"><![CDATA[<h1 id="awesome-python-books"><a href="#awesome-python-books" class="headerlink" title="awesome-python-books"></a>awesome-python-books</h1><h3 id="如果有人让你推荐-Python-技术书，请让他看这个列表"><a href="#如果有人让你推荐-Python-技术书，请让他看这个列表" class="headerlink" title="如果有人让你推荐 Python 技术书，请让他看这个列表"></a>如果有人让你推荐 Python 技术书，请让他看这个列表</h3><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>好的技术书籍可以帮助我们快速地成长，大部分人或多或少地受益于经典的技术书籍。在「Python开发者」微信公号后台，我们经常能收到让帮忙推荐书籍的消息。这类的问题在<a href="http://weibo.com/u/5305630013" target="_blank" rel="external">@Python开发者 微博</a> 和 <a href="http://group.jobbole.com/category/tech/python/" target="_blank" rel="external">伯乐在线的 Python小组</a> 讨论中也不绝于耳。 7月3日，伯乐在线在「Python开发者」微信公号<a href="http://mp.weixin.qq.com/s?__biz=MzA4MjEyNTA5Mw==&amp;mid=2652563805&amp;idx=1&amp;sn=57f4c3835346b7a4ca13d5cb4cc6cbb8&amp;scene=0#wechat_redirect" target="_blank" rel="external">发起了一个讨论</a> （注：PC端无法看到大家的评论，需要关注微信公号后，从微信才可以看到），通过这个讨论话题，在评论中分享对自己帮助很大的Python技术书籍。</p>
<p><img src="http://ww3.sinaimg.cn/small/63918611gw1epb2cbm6cmj2046046wek.jpg" alt=""><br>（Python开发者）</p>
<h2 id="入门级"><a href="#入门级" class="headerlink" title="入门级"></a>入门级</h2><p><strong>《<a href="https://www.amazon.cn/%E9%87%8D%E8%A7%86%E5%A4%A7%E8%84%91%E7%9A%84%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97-Head-First-Python-%E5%B7%B4%E9%87%8C/dp/B007NB2B4M/ref=sr_1_1?ie=UTF8&amp;qid=1467898459&amp;sr=8-1&amp;keywords=Head+First+Python&amp;tag=vastwork-23" target="_blank" rel="external">Head First Python</a>》+ 入门级 + 微信49票 + 豆瓣评分 9.5</strong> </p>
<p>推荐语：</p>
<blockquote>
<p><strong>66：</strong>浅显易懂，编排的顺序特别，有大量插图、对话，不感觉枯燥 </p>
<p><strong>古心</strong>：通熟易懂，配有大量の图片，不会觉得枯燥，是一本好的入门书</p>
</blockquote>
<p><strong>《<a href="https://www.amazon.cn/%E9%9B%86%E4%BD%93%E6%99%BA%E6%85%A7%E7%BC%96%E7%A8%8B-%E6%89%98%E6%AF%94%C2%B7%E8%A5%BF%E6%A0%BC%E5%85%B0/dp/B00UI93JD8/ref=sr_1_1?ie=UTF8&amp;qid=1467896907&amp;sr=8-1&amp;keywords=%E9%9B%86%E4%BD%93%E6%99%BA%E6%85%A7%E7%BC%96%E7%A8%8B&amp;tag=vastwork-23" target="_blank" rel="external">集体智慧编程</a>》+ 入门级 + 微信123票 + 豆瓣评分 9.0</strong> </p>
<p>推荐语：</p>
<blockquote>
<p><strong>Mèrçurý：</strong>以具体实例的方式来展示Python的编程技巧，受益良多</p>
</blockquote>
<p><strong>《Python源码剖析》+ 入门级 + 58票 + 豆瓣评分 8.7</strong> </p>
<p>推荐语：</p>
<blockquote>
<p><strong>王小惟：</strong>正在翻阅着，深入浅出了解Python底层，期待出新版本</p>
</blockquote>
<p><strong>《<a href="http://python.swaroopch.com/" target="_blank" rel="external">A Byte of Python</a>》+ 入门级 + 61票 + 豆瓣评分 8.8</strong> </p>
<p>推荐语：</p>
<blockquote>
<p><strong>姜振海：</strong>入门级经典教程，能在一天之内快速的读完，了解这门语言的基本语法</p>
</blockquote>
<p><strong>《<a href="https://www.amazon.cn/%E4%B8%8E%E5%AD%A9%E5%AD%90%E4%B8%80%E8%B5%B7%E5%AD%A6%E7%BC%96%E7%A8%8B-Warren-Sande-Carter-Sande/dp/B00HECW20S/ref=sr_1_1?ie=UTF8&amp;qid=1467897918&amp;sr=8-1&amp;keywords=%E4%B8%8E%E5%AD%A9%E5%AD%90%E4%B8%80%E8%B5%B7%E5%AD%A6%E7%BC%96%E7%A8%8B&amp;tag=vastwork-23" target="_blank" rel="external">与孩子一起学编程</a>》+ 入门级 + 29票 + 豆瓣评分 8.5</strong> </p>
<p>推荐语：</p>
<blockquote>
<p><strong>小武：</strong>传授编程思想，Python的思维，引起你对Python的兴趣，从C语言等系列语言转行到Python的和零基础的都可以看看。入门级，门槛很低。</p>
</blockquote>
<p><strong>《<a href="https://www.amazon.cn/%E5%88%A9%E7%94%A8Python%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90-%E9%BA%A6%E9%87%91%E5%B0%BC%E3%80%80-%E5%94%90%E5%AD%A6%E9%9F%AC%E3%80%80%E7%AD%89/dp/B01HYSZJ8I/ref=sr_1_fkmr0_3?ie=UTF8&amp;qid=1467896814&amp;sr=8-3-fkmr0&amp;keywords=%E7%94%A8+Python%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90&amp;tag=vastwork-23" target="_blank" rel="external">利用 Python 进行数据分析</a>》+ 入门级 + 123票 + 豆瓣评分 8.5</strong> </p>
<p>推荐语：</p>
<blockquote>
<p><strong>赵勇：</strong>第一次看的时候还不知道AQR是干啥的，实习时候发现作者竟然是AQR的？！又看了几遍。。</p>
</blockquote>
<p><strong>《<a href="https://www.amazon.cn/Python%E5%AD%A6%E4%B9%A0%E6%89%8B%E5%86%8C-%E9%B2%81%E7%89%B9%E5%85%B9/dp/B004TUJ7A6/ref=sr_1_1?ie=UTF8&amp;qid=1467896237&amp;sr=8-1&amp;keywords=Python%E5%AD%A6%E4%B9%A0%E6%89%8B%E5%86%8C&amp;tag=vastwork-23" target="_blank" rel="external">Python学习手册</a>（第四版）》+ 入门级 + 127票 + 豆瓣评分 8.2</strong> </p>
<p>推荐语：</p>
<blockquote>
<p><strong>小武：</strong>绝对是打好Python基本功的一等秘籍。是从入门到进阶的书，已经出版了多版 <strong>大家都说名字太长不太容易被人记住：</strong>从零开始学习Python，超多浅显易懂的例子，如果之前没有接触过Python，非常值得阅读</p>
</blockquote>
<p><strong>《<a href="https://www.amazon.cn/%E5%83%8F%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%AE%B6%E4%B8%80%E6%A0%B7%E6%80%9D%E8%80%83Python-%E5%94%90%E5%B0%BC/dp/B00EEDI2X6/ref=sr_1_1?ie=UTF8&amp;qid=1467897631&amp;sr=8-1&amp;keywords=think+Python&amp;tag=vastwork-23" target="_blank" rel="external">Think Python</a>》+ 入门级 + 41票 + 豆瓣评分 8.2</strong> </p>
<p>推荐语：</p>
<blockquote>
<p><strong>A XASA：</strong>入适合从零开始的初学者，每章都有练习，理论和实际相结合。建议看英文的！</p>
</blockquote>
<p><strong>《<a href="https://www.amazon.cn/%E5%9B%BE%E7%81%B5%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E4%B8%9B%E4%B9%A6-Python%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B-%E8%B5%AB%E7%89%B9%E5%85%B0/dp/B00KAFX65Q/ref=sr_1_1?ie=UTF8&amp;qid=1467898217&amp;sr=8-1&amp;keywords=Python+%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B&amp;tag=vastwork-23" target="_blank" rel="external">Python 基础教程</a>》+ 入门级 + 29票 + 豆瓣评分 8.0</strong> </p>
<p>推荐语：</p>
<blockquote>
<p><strong>郭建珠：</strong>比较详细的一本书，对全面简单的了解 Python 很有帮助，书中提供了十个项目，也有一定价值</p>
</blockquote>
<p><strong>《<a href="https://www.amazon.cn/%E5%AD%A6Python-%E8%82%96/dp/B00P6OJ0TC/ref=sr_1_1?ie=UTF8&amp;qid=1467897185&amp;sr=8-1&amp;keywords=%E7%AC%A8%E5%8A%9E%E6%B3%95%E2%80%9D%E5%AD%A6Python&amp;tag=vastwork-23" target="_blank" rel="external">笨办法学Python</a>》+ 入门级 + 93票 + 豆瓣评分 8.0</strong> </p>
<p>推荐语：</p>
<blockquote>
<p><strong>大魔王：</strong>hard way （笨办法）比较适合起步编程。入门python不错</p>
</blockquote>
<p><strong>《<a href="https://www.amazon.cn/Python%E7%AE%97%E6%B3%95%E6%95%99%E7%A8%8B-%E6%8C%AA%E5%A8%81-%E8%B5%AB%E7%89%B9%E5%85%B0/dp/B019NB0VCI/ref=sr_1_1?ie=UTF8&amp;qid=1467896678&amp;sr=8-1&amp;keywords=Python%E7%AE%97%E6%B3%95%E6%95%99%E7%A8%8B&amp;tag=vastwork-23" target="_blank" rel="external">Python算法教程</a>》+ 入门级 + 127票 + 豆瓣评分 7.7</strong> </p>
<p>推荐语：</p>
<blockquote>
<p><strong>大家都说名字太长不太容易被人记住：</strong>用Python对常用算法进行了实现，如果你看过算法导论，这本书是对简单算法的Python实现，如果你只读过学习手册，这本浅显易懂的书可以作为算法的启蒙书。</p>
</blockquote>
<p><strong>《<a href="https://www.amazon.cn/Python%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B-%E5%8D%AB%E6%96%AF%E7%90%86%E2%80%A2%E6%98%A5/dp/B01FQAS0KK/ref=sr_1_1?ie=UTF8&amp;qid=1467896739&amp;sr=8-1&amp;keywords=python%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B&amp;tag=vastwork-23" target="_blank" rel="external">Python核心编程</a>》+ 入门级 + 100票 + 豆瓣评分 7.4</strong> </p>
<p>推荐语：</p>
<blockquote>
<p><strong>丹尼斯瞎子：</strong>我是为了为了学习多线程才看得这本书，其他得像python基础教程居然都没讲多线程！ <strong>Mr. Heron：</strong>可以一直放在手边，随时翻看！！</p>
</blockquote>
<p><strong><a href="https://docs.python.org/3/" target="_blank" rel="external">Python官方手册</a> + 入门级 + 66票</strong> </p>
<p>推荐语：</p>
<blockquote>
<p><strong>Brant Ruan：</strong>有图书选择恐惧症的同学就看官方手册吧。效果非常棒！</p>
</blockquote>
<p><strong>网站 <a href="http://www.python-course.eu/" target="_blank" rel="external">www.python-course.eu</a> + 入门级 + 21票</strong> </p>
<p>推荐语：</p>
<blockquote>
<p><strong>na@A：</strong>合懂英语的人入门python，例子深入浅出并且覆盖很多容易出错的细节，而且篇幅较短。</p>
</blockquote>
<h2 id="进阶级"><a href="#进阶级" class="headerlink" title="进阶级"></a>进阶级</h2><p><strong>《<a href="https://www.amazon.cn/Flask-Web%E5%BC%80%E5%8F%91-%E5%9F%BA%E4%BA%8EPython%E7%9A%84Web%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98-%E6%A0%BC%E6%9E%97%E5%B8%83%E6%88%88/dp/B00QT2TQCG/ref=sr_1_1?ie=UTF8&amp;qid=1467898367&amp;sr=8-1&amp;keywords=flask+web%E5%BC%80%E5%8F%91&amp;tag=vastwork-23" target="_blank" rel="external">Flask Web开发:基于Python的Web应用开发实战</a>》+ 进阶级 + 29票 + 豆瓣评分 8.6</strong> </p>
<p>推荐语：</p>
<blockquote>
<p><strong>王小涌：</strong>python web领域比较经典的一本书了，作者miguel grinberg同时维护着自己的技术博客，里面有很多问题的交流</p>
</blockquote>
<p><strong>《<a href="https://www.amazon.cn/Python-Cookbook-%E5%A4%A7%E5%8D%AB%C2%B7%E6%AF%94%E6%96%AF%E5%88%A9/dp/B00WKR1OKG/ref=sr_1_1?ie=UTF8&amp;qid=1467884867&amp;sr=8-1&amp;keywords=Python+cookbook&amp;tag=vastwork-23" target="_blank" rel="external">Python Cookbook</a>（第三版）》+ 进阶级 +  微信 347 票  + 豆瓣评分 </strong>8.4<em>**</em> </p>
<p>推荐语：</p>
<blockquote>
<p><strong>yran：</strong>适合有基础的人员阅读，可以作为参考手册查询 </p>
<p><strong>大家都说名字太长不太容易被人记住：</strong>对正则表达式，IO，装饰器，面向对象，常用内置模块都有一个比较全面的解释，如果已经熟练掌握学习手册的内容，这本书可以作为工具书，解决一些常见的实际问题，如果之前熟悉java等更复杂的语言，对数据结构和算法也有了解，但是需要结合Python解决工作中可能遇到的小问题，建议阅读一下</p>
</blockquote>
<p><strong>《<a href="https://www.amazon.cn/Python%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97-%E5%BC%A0%E8%8B%A5%E6%84%9A/dp/B01F8GN462/ref=sr_1_1?ie=UTF8&amp;qid=1467896121&amp;sr=8-1&amp;keywords=python%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97&amp;tag=vastwork-23" target="_blank" rel="external">Python科学计算</a>》+ 进阶级 + 156 票 + 豆瓣评分 8.0</strong> </p>
<p>推荐语：</p>
<blockquote>
<p><strong>侯海涛：</strong>学习大数据处理的一本好书，分中英版，值得一看，特别是做数据分析 <strong>大家都说名字太长不太容易被人记住：</strong>用了较小的篇幅全面介绍了常用的numpy，plt，list在科学计算中的应用，其他主要是tkinter，marvi等数据可视化模块，而且网上有电子版，可以当做工具书浅浅的阅读一下，需要可视化的时候，里面的一些教程程序有参考价值</p>
</blockquote>
<p><strong>《<a href="https://www.amazon.cn/dp/B00MHDPIJ6/ref=sr_1_1?ie=UTF8&amp;qid=1467898003&amp;sr=8-1&amp;keywords=Python%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98&amp;tag=vastwork-23" target="_blank" rel="external">Python编程实战:运用设计模式、并发和程序库创建高质量程序</a>》+ 进阶级 + 24票 + 豆瓣评分 7.8</strong> </p>
<p>推荐语：</p>
<blockquote>
<p><strong>张跃：</strong>读懂设计模式在Python中的应用对入门到进阶的开发者很有帮助</p>
</blockquote>
<p><strong>《<a href="https://www.amazon.cn/Python%E7%BB%9D%E6%8A%80-%E8%BF%90%E7%94%A8Python%E6%88%90%E4%B8%BA%E9%A1%B6%E7%BA%A7%E9%BB%91%E5%AE%A2-%E5%A5%A5%E7%A7%91%E7%BD%97/dp/B019ZRGBVU/ref=sr_1_1?ie=UTF8&amp;qid=1467897063&amp;sr=8-1&amp;keywords=python%E7%BB%9D%E6%8A%80&amp;tag=vastwork-23" target="_blank" rel="external">Python绝技:运用Python成为顶级黑客</a>》+ 进阶级 + 192票</strong> </p>
<p>推荐语：</p>
<blockquote>
<p><strong>Eric：</strong>以前用这上面学到的东西，让喜欢打游戏的室友在团战时候只要我按回车，他们就掉线。</p>
</blockquote>
<p><strong>《<a href="https://www.amazon.cn/Beginning-Game-Development-with-Python-and-Pygame-From-Novice-to-Professional-McGugan-Will/dp/1590598725/ref=sr_1_1?ie=UTF8&amp;qid=1467897815&amp;sr=8-1&amp;keywords=beginning+Python+games+development&amp;tag=vastwork-23" target="_blank" rel="external">Beginning Python Games Development</a>》+ 进阶级 + 55票</strong> </p>
<p>推荐语：</p>
<blockquote>
<p><strong>xinming：</strong>人生苦短，我用python，写写小游戏自娱自乐</p>
</blockquote>
<p><strong>《<a href="https://www.amazon.cn/Fluent-Python-Ramalho-Luciano/dp/1491946008/ref=sr_1_1?ie=UTF8&amp;qid=1467898561&amp;sr=8-1&amp;keywords=Fluent+Python&amp;tag=vastwork-23" target="_blank" rel="external">Fluent Python</a>》 + 进阶级 + 12 票</strong> </p>
<p>推荐语：</p>
<blockquote>
<p><strong>伊凡：</strong>讲了很多细节，以及语言设计背后的考量，对深入理解以及写出Pythonic的代码很有帮助</p>
</blockquote>
<h2 id="你也可以来推荐"><a href="#你也可以来推荐" class="headerlink" title="你也可以来推荐"></a>你也可以来推荐</h2><p>以上推荐和点赞是来自微信「开发者」微信公号，你也可以在本文评论中，用以下格式来荐上述列表中没有出现的好书： <strong>《书籍名称》</strong>、<strong>入门级 or 进阶级</strong>、<strong>一句话推荐语</strong>  </p>
<h2 id="让更多人知道"><a href="#让更多人知道" class="headerlink" title="让更多人知道"></a>让更多人知道</h2><p>后续我们将不断通过微信、微博和网站等来宣传这个经典Python技术书单。推荐人将一直署名在其中。如果这个经典Python技术书籍列表让你受益，请帮忙通过朋友圈、微博、QQ空间等途径扩散给更多人，谢谢！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;awesome-python-books&quot;&gt;&lt;a href=&quot;#awesome-python-books&quot; class=&quot;headerlink&quot; title=&quot;awesome-python-books&quot;&gt;&lt;/a&gt;awesome-python-books&lt;/h1&gt;&lt;
    
    </summary>
    
      <category term="学习" scheme="http://dwflzxj.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="技术，Python" scheme="http://dwflzxj.github.io/tags/%E6%8A%80%E6%9C%AF%EF%BC%8CPython/"/>
    
  </entry>
  
  <entry>
    <title>如何利用Hexo和GitHub搭建一个静态博客</title>
    <link href="http://dwflzxj.github.io/2016/07/16/%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8Hexo%E5%92%8CGitHub%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"/>
    <id>http://dwflzxj.github.io/2016/07/16/如何利用Hexo和GitHub搭建一个静态博客/</id>
    <published>2016-07-16T15:30:00.000Z</published>
    <updated>2016-07-16T17:34:56.892Z</updated>
    
    <content type="html"><![CDATA[<h3 id="闲扯"><a href="#闲扯" class="headerlink" title="闲扯"></a>闲扯</h3><hr>
<p>博客搭了有半年了，基本没怎么用过突然觉得还是要用起来才行啊。因为这该死的语言组织能力，写博客这种方式应该是一种不错的锻炼方式。我目前的叙述方式基本是大脑里冒出来什么就写什么的叙事风格十分杂乱。还是没有摆脱小学生作文的水平的说。。。<br><img src="http://ww4.sinaimg.cn/mw690/006g6mbagw1f5w8iyki1jj30240270si.jpg" alt="image"></p>
<h3 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h3><hr>
<ol>
<li>将会在博客中陆续更新一些技术类的文章争取原创，由于实力有限所以也是一种鞭策吧。毕竟如果要写出来分享的话，才会有加把劲的觉悟啊。最好的学习方法就是把要学的东西讲给别人听不是么。<br><img src="http://ww2.sinaimg.cn/mw690/006g6mbagw1f5w8ixs1u4g302101tjr7.gif" alt="image"></li>
<li>影评歌曲分享也是比较喜欢的，终于可以在自己的博客写影评不是很装逼的一件事吗哈哈<br><img src="http://ww4.sinaimg.cn/mw690/006g6mbagw1f5w8ixwi3pj3028028we9.jpg" alt="image"></li>
<li>github千万别完蛋了啊，哥的东西可都交给你了。</li>
</ol>
<hr>
<h3 id="言归正传"><a href="#言归正传" class="headerlink" title="言归正传"></a>言归正传</h3><p>本来打算用farbox玩博客的，简单方便还有多种模板。装个farbox可以本地markdown编辑完博客直接同步。对于只是想玩博客的同学来说还是不错的选择。只是需要收费，作为一个苦逼程序员玩个博客还要收钱太不geek了。所以最终还是选择了hexo和github搭建博客的方式。</p>
<h4 id="用github和hexo搭建博客有两个优点"><a href="#用github和hexo搭建博客有两个优点" class="headerlink" title="用github和hexo搭建博客有两个优点"></a>用github和hexo搭建博客有两个优点</h4><ol>
<li>免费</li>
<li>可以将github运用到实际中，很多人并不知道如何使用github。在网络上的各种教程都看过之后也是一知半解。实际操作一遍是大有裨益的。毕竟不学一下就搭不起博客了，瞬间就有动力了。</li>
</ol>
<h4 id="如何搭建"><a href="#如何搭建" class="headerlink" title="如何搭建"></a>如何搭建</h4><p>如何开始hexo搭建，可以参照这篇文章<a href="http://ibruce.info/2013/11/22/hexo-your-blog/" target="_blank" rel="external"><strong>hexo你的博客</strong></a>网上还有很多其他的教程，基本照着做一遍就可以搭建完成了。重新造轮子没有太大的意义就不赘叙了。如果还有问题可以看<a href="http://ibruce.info/2013/11/22/hexo-your-blog/" target="_blank" rel="external"><strong>Hexo官网</strong></a>。</p>
<p>完成了以上的操作你可能还需要知道一些内容。</p>
<hr>
<p>搭建完成博客之后当然就是写博客了，如何很好的利用这个博客需要知道以下的知识。</p>
<ol>
<li><h5 id="什么是hexo呢？"><a href="#什么是hexo呢？" class="headerlink" title="什么是hexo呢？"></a>什么是hexo呢？</h5><p>Hexo是一个快速、简洁且高效的博客框架。Hexo使用Markdown解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
</li>
<li><h5 id="什么是markdown？"><a href="#什么是markdown？" class="headerlink" title="什么是markdown？"></a>什么是markdown？</h5></li>
</ol>
<p>Markdown 是一种轻量级标记语言，创始人为约翰·格鲁伯（John Gruber）和亚伦·斯沃茨（Aaron Swartz）。它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML(或者HTML)文档”。这种语言吸收了很多在电子邮件中已有的纯文本标记的特性。</p>
<p>为什么需要知道markdown？其实不知道markdown也可以写博客。但是这么方便的标记语言可以使你更加注重内容而不用花太多时间在排版上节省了不少的时间。作为一个刚学习markdown不久的新人，我认为这是一款非常容易上手的标记语言。只需要网上百度大致的语法加上一款markdown编辑器就搞定了。我目前用的是有道云笔记（网易粉的选择）<img src="http://note.youdao.com/favicon.ico" alt="image"></p>
<ol>
<li><h5 id="何使用git"><a href="#何使用git" class="headerlink" title="何使用git?"></a>何使用git?</h5></li>
</ol>
<p>请点击<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137402760310626208b4f695940a49e5348b689d095fc000" target="_blank" rel="external">git简明教程</a><br>作为世界上最先进的分布式版本控制系统没道理不了解一下，即使不是程序员。用来保存工作中的文档也是很有用的。而且很高端有没有。</p>
<hr>
<h3 id="使用效果"><a href="#使用效果" class="headerlink" title="使用效果"></a>使用效果</h3><h4 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h4><p>用有道云编辑之后将md文件放到Hexo\source\_posts路径下</p>
<p>如图左侧是编辑框，右侧是效果图。比较方便</p>
<p><img src="http://ww3.sinaimg.cn/mw690/006g6mbagw1f5w8q8cwfrj311q0k5aiz.jpg" alt="image"></p>
<h4 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h4><p>gitbash执行</p>
<p>hexo clean &amp;&amp; hexo g &amp;&amp; hexo deploy &amp;&amp; hexo clean</p>
<p>hexo clean : 清理 database 和 /public目录， /public目录里是生成的静态文件数据。</p>
<p>hexo generaet : 简写是 “hexo g” 命令是用来生成静态页面的 会创建 /public目录静态页面数据都在这个文件夹里。</p>
<p>hexo deploy ： 一键部署命令上面在 _config.yml文件中配置了部署信息。这个命令会帮助你一键部署。</p>
<p><img src="http://ww2.sinaimg.cn/mw690/006g6mbagw1f5w8q8rpnqj30ep0kathn.jpg" alt="image"><br>这些执行完然后博客就成功发布啦~<br><img src="http://ww4.sinaimg.cn/mw690/006g6mbagw1f5w92mtjguj301z025a9u.jpg" alt="image"></p>
<h3 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h3><p><strong>话说这些图片是怎么来的呢？实践发现最好的图床还是新浪微博了。所以我的新浪微博就成了图床了。PS.第一次写好累，不全再补充。 </strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;闲扯&quot;&gt;&lt;a href=&quot;#闲扯&quot; class=&quot;headerlink&quot; title=&quot;闲扯&quot;&gt;&lt;/a&gt;闲扯&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;博客搭了有半年了，基本没怎么用过突然觉得还是要用起来才行啊。因为这该死的语言组织能力，写博客这种方式应该是一种不错的锻炼方式。我目
    
    </summary>
    
      <category term="Private" scheme="http://dwflzxj.github.io/categories/Private/"/>
    
    
      <category term="技术类" scheme="http://dwflzxj.github.io/tags/%E6%8A%80%E6%9C%AF%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>如何才能写出没有Bug的程序</title>
    <link href="http://dwflzxj.github.io/2016/04/08/%E5%A6%82%E4%BD%95%E6%89%8D%E8%83%BD%E5%86%99%E5%87%BA%E6%B2%A1%E6%9C%89Bug%E7%9A%84%E7%A8%8B%E5%BA%8F/"/>
    <id>http://dwflzxj.github.io/2016/04/08/如何才能写出没有Bug的程序/</id>
    <published>2016-04-08T07:21:32.000Z</published>
    <updated>2016-04-08T09:23:10.904Z</updated>
    
    <content type="html"><![CDATA[<h1 id="以下为知乎上看到的一段回答，印象深刻。也许任何一个程序员写出第一个可执行的代码的时候都是如此的感受吧"><a href="#以下为知乎上看到的一段回答，印象深刻。也许任何一个程序员写出第一个可执行的代码的时候都是如此的感受吧" class="headerlink" title="以下为知乎上看到的一段回答，印象深刻。也许任何一个程序员写出第一个可执行的代码的时候都是如此的感受吧~"></a>以下为知乎上看到的一段回答，印象深刻。也许任何一个程序员写出第一个可执行的代码的时候都是如此的感受吧~</h1><p>我是在学校图书馆学会编程的。</p>
<p>我花了很长时间看了很多关于C语言编程的书，却始终没有写过一行代码。<br>我一直在怀疑这些书中写的东西是不是真的。真的只要几行代码就可以在屏幕画出各种几何形状？真的可以写一些代码就能编出一个能跟人下棋的程序？<br>我当然没有那么愚昧，真的在怀疑这些事情本身。我只是隐约觉得，如果编程这件事这么神奇，也许将会改变我的人生。而那段时间我对自己很绝望，不相信自己还会有美好的未来。所以我怀疑的其实是自己，我真的可以写程序完成这些神奇的事情吗？所以我看了很多编程的书，却始终没有勇气到电脑上真正去写一行代码。</p>
<p>最后，当我花了一块钱，在学校的计算机房买了一个小时的上机时间决定写下自己人生的第一个程序的时候，感觉自己像是去朝圣，内心中的感受大约和藏传佛教的信徒磕了几千里的等身长头最终看到布达拉宫一样。<br>为了这一刻，我把一个简单的程序在草稿纸上反复写了无数遍，而在那台386电脑上输入了这段小小的程序后，我又认真的检查了每一个字符。<br>当我按下回车键，运行程序的时候，仿佛在触摸某种神迹。<br>程序顺利运行，完美地呈现了这段代码最初的期望，那一刻，我泪流满面，浑身颤抖，我觉得自己进入了一个新的世界。</p>
<p>那是我写的第一个程序，那是我写过的唯一一个没有BUG的程序。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;以下为知乎上看到的一段回答，印象深刻。也许任何一个程序员写出第一个可执行的代码的时候都是如此的感受吧&quot;&gt;&lt;a href=&quot;#以下为知乎上看到的一段回答，印象深刻。也许任何一个程序员写出第一个可执行的代码的时候都是如此的感受吧&quot; class=&quot;headerlink&quot;
    
    </summary>
    
      <category term="摘抄" scheme="http://dwflzxj.github.io/categories/%E6%91%98%E6%8A%84/"/>
    
    
      <category term="博客，文章" scheme="http://dwflzxj.github.io/tags/%E5%8D%9A%E5%AE%A2%EF%BC%8C%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>给宝宝的一周年礼物</title>
    <link href="http://dwflzxj.github.io/2016/02/28/%E7%BB%99%E5%A4%A7%E5%AE%9D%E7%9A%84%E4%B8%80%E5%91%A8%E5%B9%B4%E7%A4%BC%E7%89%A9/"/>
    <id>http://dwflzxj.github.io/2016/02/28/给大宝的一周年礼物/</id>
    <published>2016-02-28T13:40:11.000Z</published>
    <updated>2016-02-28T14:07:54.745Z</updated>
    
    <content type="html"><![CDATA[<p>永生花和八音盒的完美结合 Your are My Precious One~<br><img src="http://ww1.sinaimg.cn/bmiddle/74b6d573jw1f1fdzx24xnj20zk0qoai7.jpg" alt="img"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;永生花和八音盒的完美结合 Your are My Precious One~&lt;br&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/bmiddle/74b6d573jw1f1fdzx24xnj20zk0qoai7.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;

    
    </summary>
    
      <category term="一些文艺东东" scheme="http://dwflzxj.github.io/categories/%E4%B8%80%E4%BA%9B%E6%96%87%E8%89%BA%E4%B8%9C%E4%B8%9C/"/>
    
    
      <category term="合法秀恩爱" scheme="http://dwflzxj.github.io/tags/%E5%90%88%E6%B3%95%E7%A7%80%E6%81%A9%E7%88%B1/"/>
    
  </entry>
  
  <entry>
    <title>关于MMA的随笔</title>
    <link href="http://dwflzxj.github.io/2016/02/27/%E8%B0%88%E8%B0%88%E6%88%91%E5%96%9C%E6%AC%A2%E7%9A%84MMA/"/>
    <id>http://dwflzxj.github.io/2016/02/27/谈谈我喜欢的MMA/</id>
    <published>2016-02-27T13:02:41.000Z</published>
    <updated>2016-02-27T15:26:06.674Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://b350.photo.store.qq.com/psb?/a7baae66-2af5-4e7c-853c-6d19c105134b/2H679LIMGSGvojCsLZRKxDhYJX4Vt5Egc2MPjeoMcvY!/b/dMV.q9D5CAAA&amp;bo=9AHoAAAAAAACHic!&amp;rf=viewer_4" alt="img"></p>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><pre><code>如果说21世纪什么运动发展最快，那么毫无疑问是——综合搏击MMA运动。1993年11月12日，不分体重级别、无规则的终极格斗大赛UFC横空出世，令世界认识了一种新兴的运动MMA。拳击、空手道、跆拳道、泰拳、柔道、柔术、摔跤等各种流派的格斗技都可以在MMA擂台上毫无约束的各显身手。 
</code></pre><h1 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h1><pre><code>大学散打课第一次近距离接触到了格斗，虽然小时候也有看拳击但是真的练习一下和看电视还是不一样的。一分钟的空击已经是气喘吁吁了，但是感觉还是很好的。最喜欢的是互相打手靶。虽然对于有的同学来说这是一种煎熬，其实任何运动都是有他的美与技巧的。就像看NBA球员打球无论从视觉还是感受上都是一种享受。同样综合格斗也有他的魅力，合理的控制气息和力量是很享受的过程。同样在姿势上也就没那么难看了，因为实在好多人出拳的样子真是丑爆了。再加上为了混个学分的心态其实我是和一群娘炮学习了散打，到现在我还是想去真的格斗馆训练。
第一次被综合格斗的魅力吸引是因为在健身的时候看了一则杨建平的训练视频下面这个，那时候只是觉得酷吧。开始关注看MMA最有影响力的赛事UFC，开始渐渐入坑。现在已经无法自拔了。当然喜欢一件事情最基本的要求就是了解，而不是简单的觉得酷。比如这个杨建平其实就是个水货，只能在国内的赛场上刷刷小怪。粉丝多半是没什么深入了解的。所以我认为真的热爱是会去学习的。
[http://v.youku.com/v_show/id_XMTE0MTgwNDA0.html](http://v.youku.com/v_show/id_XMTE0MTgwNDA0.html)
</code></pre><h1 id="释疑"><a href="#释疑" class="headerlink" title="释疑"></a>释疑</h1><pre><code>当然每个人都有自己的爱好，往往一些人的爱好是得不到另一些人的理解的。就拿MMA来说在国内的发展还在起步阶段，韩国和日本的选手在国际赛事上已经可以有一席之地（虽然我们常说韩国棒子是娘炮）。国内大多数人还没有接触这项运动，甚至觉得是残酷野蛮的不登大雅之堂的。我却觉得暴力也是一种美，在击打和对抗的过程中才能体现战士的风采。而往往选手血流满面还在努力支撑也是一种坚韧不拔的精神体现。这些都是从男人诞生以来就被赋予的，只是很多人已经没有了。我一直认为男人从生下来最原始的身份就是战士，只是人类的文明使得我们不再需要持着矛去时刻保卫家园了。但是这种被封存的野性还是可以在现代的规则之下重新唤醒的，八角笼中使出浑身解数将对手击倒。
</code></pre><h1 id="技术介绍"><a href="#技术介绍" class="headerlink" title="技术介绍"></a>技术介绍</h1><pre><code>无限制格斗只要把对手击倒不限制过多，但是不代表完全不限制。踢裆和击打后脑这类都是违规的。除此之外几乎可以用一切可能用的技术，是最接近实战的格斗类型。所谓外行看看热闹内行看门道。我记得小时候看拳击的时候一直觉得不耐烦，怎么还不击打，怎么一拳就倒了，俩人转悠这么久。后来看奥运柔术比赛看两个人在地上打滚然后就莫名其妙的赢了，完全摸不到头脑。其实这正是因为根本不了解，也就无从领略其中的乐趣。那么究竟有些什么技巧呢？其实大多数人关心的是如何击倒对手。技术分两种第一种是站立第二种是地面。
</code></pre><h1 id="站立和地面"><a href="#站立和地面" class="headerlink" title="站立和地面"></a>站立和地面</h1><pre><code>所谓站立就是拳击和腿法。内容实在太多了，一一介绍闲的繁琐。我只总结出了一个规则。对于臂长小于自己的，控制距离注意防TD，只要体能跟得上基本是吊打的节奏。对于臂长体重优于自己的直接下潜抱摔拖到地面用柔术。专业术语叫做TD(Take down)，如果对手没有柔术意识基本也是吊打的节奏。什么是技术在takedown的时候最能看出来了，无论是木村锁，断头台，手臂三角绞，三角锁这些锁技。还是虾行抱摔的基本功，又或是拿背过膝的意识。在触地的一刹那就已经定下了输赢。为什么柔术大师主动倒地对手也不敢上去击打就是这个道理了。说道柔术实在想谈一下日本人，日本的柔术绝对是科学实用的比国内的一些神功强太多了，我们不能生活在电影里。下面是日本人樱庭和志的集锦。一直很苦恼为什么中国13亿人都没有像样的格斗选手，什么武僧一龙只能在腾讯新闻糊弄一下不看比赛的观众了。兄弟们何时能手撕鬼子呢。
[http://v.youku.com/v_show/id_XMzc4NzgwNTI4.html](http://v.youku.com/v_show/id_XMzc4NzgwNTI4.html)
</code></pre><h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><pre><code>希望有更多的人关注这项运动，更多的中国选手可以登上国际舞台。
</code></pre><p><img src="http://b329.photo.store.qq.com/psb?/a7baae66-2af5-4e7c-853c-6d19c105134b/UrySqtgROBMM84M.Z9IoZIdO*vlcaOLdBGqIQDsL7aY!/b/dA61JcTEAAAA&amp;bo=9AH*AAAAAAACHzE!&amp;rf=viewer_4" alt="img"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://b350.photo.store.qq.com/psb?/a7baae66-2af5-4e7c-853c-6d19c105134b/2H679LIMGSGvojCsLZRKxDhYJX4Vt5Egc2MPjeoMcvY!/b/dMV.q9D
    
    </summary>
    
      <category term="生活感想" scheme="http://dwflzxj.github.io/categories/%E7%94%9F%E6%B4%BB%E6%84%9F%E6%83%B3/"/>
    
    
      <category term="MMA" scheme="http://dwflzxj.github.io/tags/MMA/"/>
    
  </entry>
  
  <entry>
    <title>MarkDown相关</title>
    <link href="http://dwflzxj.github.io/2016/02/25/%E6%B5%8B%E8%AF%95/"/>
    <id>http://dwflzxj.github.io/2016/02/25/测试/</id>
    <published>2016-02-25T15:46:25.000Z</published>
    <updated>2016-02-26T07:09:18.837Z</updated>
    
    <content type="html"><![CDATA[<p>为什么学习Markdown？别问为什么，尽管学习就好了。这么简单的东西，一会就能学会，受益可能终生，太值了。</p>
<h4 id="怎么学习Markdown？我认为最好的方法是通过示例，本文正式采用这样的方法。"><a href="#怎么学习Markdown？我认为最好的方法是通过示例，本文正式采用这样的方法。" class="headerlink" title="怎么学习Markdown？我认为最好的方法是通过示例，本文正式采用这样的方法。"></a>怎么学习Markdown？我认为最好的方法是通过示例，本文正式采用这样的方法。</h4><p>在哪可以使用Markdown？ 你可以在简书、Logdown这样的免费平台用Markdown写博客。如果你愿意折腾，也可以像我一样，使用hexo搭建自己的博客，并用Markdown书写博客，请参考拙作《hexo系列教程》。另外，现在写论文也流行使用Markdown，不学你就out了！</p>
<p>怎样开始？打开这个网址，把下面学到的东西在这个里面练习。左侧是Markdown，右侧是实时的显示。</p>
<p>还要注意什么？一个效果，有时候可以通过不同的方式生成，比如无序列表可以用- + *。本文从实践出发，只列举最好用的一种。读者也只需要学习一种。</p>
<p>以下是Markdown代码：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="header">#这里是一级标题</span></span><br><span class="line"><span class="header">###这里是三级标题</span></span><br><span class="line"><span class="header">######这里是六级标题，就到这里了，木有七级！</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">段落前面没有缩进，看到了吧。</span><br><span class="line"></span><br><span class="line">　　要想使用缩进，在中文输入法中改成「全角」输入，再按两个空格</span><br><span class="line"></span><br><span class="line">行尾一个回车换行，显示效果依然是是一行。</span><br><span class="line">我说的对吧~</span><br><span class="line"></span><br><span class="line">想要分成两行，需要在行尾输入两个空格。  </span><br><span class="line">我说的对吧~</span><br><span class="line"></span><br><span class="line">想要开始一个新的段落，乖乖的按两下回车吧</span><br><span class="line"></span><br><span class="line">我说的对吧~</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="strong">**两个星号包围的是粗体**</span></span><br><span class="line"></span><br><span class="line"><span class="emphasis">*一个星号包围的是斜体*</span></span><br><span class="line"></span><br><span class="line"><span class="blockquote">&gt; 引用内容，多行的话，用两个空格结尾吧  </span></span><br><span class="line">是吧~</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="code">`反引号包围的是行内代码`</span>，这个按键在「Tab」上边</span><br><span class="line"></span><br><span class="line"><span class="code">``嵌套的话，可以使用`</span>两个双引号<span class="code">`嵌套在外面`</span>`</span><br><span class="line"></span><br><span class="line"><span class="code">```</span>python</span><br><span class="line"><span class="header">#三个反引号包围的是代码块。</span></span><br><span class="line"><span class="header">#会显示行号。</span></span><br><span class="line"><span class="header">#也有高亮显示</span></span><br><span class="line"><span class="header">#我上面加了python，你也可以不加。如果不能高亮，那么还是加上吧。。另外，如果你的代码块包围的是html，那你应该写html而不是python</span></span><br><span class="line">import os</span><br><span class="line">print os.sep</span><br></pre></td></tr></table></figure></p>
<p>嵌套的话，可以使用六个反引号嵌套在外面。</p>
<ol>
<li>有序列表1，注意点之后的空格。</li>
<li>有序列表2.</li>
<li><p>我这里写成1，在显示时还是3，厉害不。</p>
</li>
<li><p>有序列表1<br>详细内容，注意前面有一个空格</p>
</li>
<li>有序列表2<br>详细内容</li>
</ol>
<ul>
<li>无序列表1</li>
<li>无序列表2</li>
<li>无序列表3<ul>
<li>小1，注意前面有一个空格</li>
<li>小2</li>
</ul>
</li>
</ul>
<p>超级链接：<a href="http://zipperary.com" target="_blank" rel="external">我的博客</a></p>
<p>插入图片：<img src="http://ww2.sinaimg.cn/large/5e8cb366jw1e62o63tkv3j20dh078q5a.jpg" alt="好看不"></p>
<p><del>删除线</del></p>
<p>分割线用<code>---</code>，注意单独一样，上面必须是一个空行</p>
<hr>
<p>更多高级的格式，请果断插入html标签</p>
<p>```</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为什么学习Markdown？别问为什么，尽管学习就好了。这么简单的东西，一会就能学会，受益可能终生，太值了。&lt;/p&gt;
&lt;h4 id=&quot;怎么学习Markdown？我认为最好的方法是通过示例，本文正式采用这样的方法。&quot;&gt;&lt;a href=&quot;#怎么学习Markdown？我认为最好的
    
    </summary>
    
      <category term="技术分享" scheme="http://dwflzxj.github.io/categories/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="MarkDown" scheme="http://dwflzxj.github.io/tags/MarkDown/"/>
    
  </entry>
  
  <entry>
    <title>给我一个岛</title>
    <link href="http://dwflzxj.github.io/2016/02/25/%E7%BB%99%E6%88%91%E4%B8%80%E4%B8%AA%E5%B2%9B/"/>
    <id>http://dwflzxj.github.io/2016/02/25/给我一个岛/</id>
    <published>2016-02-25T14:43:32.000Z</published>
    <updated>2016-04-30T05:52:47.482Z</updated>
    
    <content type="html"><![CDATA[<p>不管我会在旅途上遭逢到什么样的挫折，不管我会在多么遥远的地方停留下来，不管我会在他乡停留多久，半生甚至一生！只要我心里知道，在不变的海洋上有一个不变的岛在等待着我，那么，这人世间一切的颠沛与艰难都是可以忍受并且可以克服的了。<br>测试修改内容是否有效 脱离hexo deploy</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不管我会在旅途上遭逢到什么样的挫折，不管我会在多么遥远的地方停留下来，不管我会在他乡停留多久，半生甚至一生！只要我心里知道，在不变的海洋上有一个不变的岛在等待着我，那么，这人世间一切的颠沛与艰难都是可以忍受并且可以克服的了。&lt;br&gt;测试修改内容是否有效 脱离hexo dep
    
    </summary>
    
      <category term="一些文艺东东" scheme="http://dwflzxj.github.io/categories/%E4%B8%80%E4%BA%9B%E6%96%87%E8%89%BA%E4%B8%9C%E4%B8%9C/"/>
    
    
      <category term="博客，文章" scheme="http://dwflzxj.github.io/tags/%E5%8D%9A%E5%AE%A2%EF%BC%8C%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>第一篇博客</title>
    <link href="http://dwflzxj.github.io/2016/02/24/hello-world/"/>
    <id>http://dwflzxj.github.io/2016/02/24/hello-world/</id>
    <published>2016-02-24T14:43:32.000Z</published>
    <updated>2016-02-25T14:49:08.607Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一篇博客想说的当然是HelloWorld了"><a href="#第一篇博客想说的当然是HelloWorld了" class="headerlink" title="第一篇博客想说的当然是HelloWorld了~"></a>第一篇博客想说的当然是HelloWorld了~</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第一篇博客想说的当然是HelloWorld了&quot;&gt;&lt;a href=&quot;#第一篇博客想说的当然是HelloWorld了&quot; class=&quot;headerlink&quot; title=&quot;第一篇博客想说的当然是HelloWorld了~&quot;&gt;&lt;/a&gt;第一篇博客想说的当然是HelloWor
    
    </summary>
    
      <category term="标准" scheme="http://dwflzxj.github.io/categories/%E6%A0%87%E5%87%86/"/>
    
    
      <category term="博客，文章" scheme="http://dwflzxj.github.io/tags/%E5%8D%9A%E5%AE%A2%EF%BC%8C%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
</feed>
